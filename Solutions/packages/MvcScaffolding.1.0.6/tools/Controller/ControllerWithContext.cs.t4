<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SharpArch.NHibernate.Contracts.Repositories;
using SharpArch.NHibernate.Web.Mvc;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if(Model.DbContextNamespace != Model.ModelTypeNamespace) { #>
using <#= Model.DbContextNamespace #>;
<# } #>

namespace <#= Model.ControllerNamespace #>
{   
<#  
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var modelVariable = modelName.ToLower(); 
	var varModelVariable = modelVariable + "Model";
	var repositoryName = "_" + modelVariable + "Repository";
    var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey); 
    var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
#>
     public class <#= Model.ControllerName #> : ControllerCustom
    {
	    private readonly INHibernateRepository<<#= modelName #>> <#= repositoryName #>;

		public <#= Model.ControllerName #>(INHibernateRepository<<#= modelName #>> <#= repositoryName #>)
		{
            this.<#= repositoryName #> = <#= repositoryName #>;
		}
		
        
		   public ActionResult Index()
        {

            var lst = <#= repositoryName #>.GetAll();
            return View(lst);

        }
 
		private void DataBind()
        {
             
        }
 
        public ActionResult Create()
        {
			DataBind();
            return View(new <#= modelName #>());
        }

        [Transaction]
        [ValidateAntiForgeryToken]
        [HttpPost]
        public ActionResult Create(FormCollection collection)
        {
            
			var <#= varModelVariable #> = new <#= modelName #>();
            TryUpdateModel(<#= varModelVariable #>, collection);
            try {
                if (ModelState.IsValid && <#= varModelVariable #>.IsValid()) {
                    this.<#= repositoryName #>.SaveOrUpdate(<#= varModelVariable #>);
                    return this.RedirectToAction("Index");
                }
            }
            catch (Exception ex) {
                ObjLog.Error(string.Format("<#= Model.ControllerName #>(Create):{0}", ex.Message));
            }
            DataBind();
            return View(<#= varModelVariable #>);
			
        }
		
		     [HttpGet]
        public ActionResult Edit(int id)
        {
			DataBind();		
            return View(this.<#= repositoryName #>.Get(id));
        }

        [Transaction]
        [ValidateAntiForgeryToken]
        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
           var <#= varModelVariable #> = <#= repositoryName #>.Get(id);
            TryUpdateModel(<#= varModelVariable #>, collection);
            try {
                if (ModelState.IsValid && <#= varModelVariable #>.IsValid()) {
                    this.<#= repositoryName #>.SaveOrUpdate(<#= varModelVariable #>);
                    return this.RedirectToAction("Index");
                }
            }
            catch (Exception ex) {
                ObjLog.Error(string.Format("<#= Model.ControllerName #>(Create):{0}", ex.Message));
            }
            DataBind();
            return View(<#= varModelVariable #>);
        }
	
		
        //
        // GET: /<#= routingName #>/Delete/5
 
        public ActionResult Delete(<#= primaryKeyProperty.Type.AsString #> id)
        {
           return View(this.<#= repositoryName #>.Get(id));
        }

        //
        // POST: /<#= routingName #>/Delete/5

        [HttpPost, ActionName("Delete")]
		[ValidateAntiForgeryToken]
		[Transaction]
        public ActionResult DeleteConfirmed(<#= primaryKeyProperty.Type.AsString #> id)
        {
            var <#= modelVariable #>Model = this.<#= repositoryName #>.Get(id);
            this.<#= repositoryName #>.Delete(<#= modelVariable #>Model);
            return this.RedirectToAction("Index");
        }

       
    }
}